# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libconfig', [dirname(__file__)])
        except ImportError:
            import _libconfig
            return _libconfig
        if fp is not None:
            try:
                _mod = imp.load_module('_libconfig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libconfig = swig_import_helper()
    del swig_import_helper
else:
    import _libconfig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


LIBCONFIG_VER_MAJOR = _libconfig.LIBCONFIG_VER_MAJOR
LIBCONFIG_VER_MINOR = _libconfig.LIBCONFIG_VER_MINOR
LIBCONFIG_VER_REVISION = _libconfig.LIBCONFIG_VER_REVISION
CONFIG_TYPE_NONE = _libconfig.CONFIG_TYPE_NONE
CONFIG_TYPE_GROUP = _libconfig.CONFIG_TYPE_GROUP
CONFIG_TYPE_INT = _libconfig.CONFIG_TYPE_INT
CONFIG_TYPE_INT64 = _libconfig.CONFIG_TYPE_INT64
CONFIG_TYPE_FLOAT = _libconfig.CONFIG_TYPE_FLOAT
CONFIG_TYPE_STRING = _libconfig.CONFIG_TYPE_STRING
CONFIG_TYPE_BOOL = _libconfig.CONFIG_TYPE_BOOL
CONFIG_TYPE_ARRAY = _libconfig.CONFIG_TYPE_ARRAY
CONFIG_TYPE_LIST = _libconfig.CONFIG_TYPE_LIST
CONFIG_FORMAT_DEFAULT = _libconfig.CONFIG_FORMAT_DEFAULT
CONFIG_FORMAT_HEX = _libconfig.CONFIG_FORMAT_HEX
CONFIG_OPTION_AUTOCONVERT = _libconfig.CONFIG_OPTION_AUTOCONVERT
CONFIG_TRUE = _libconfig.CONFIG_TRUE
CONFIG_FALSE = _libconfig.CONFIG_FALSE
class config_value_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, config_value_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, config_value_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ival"] = _libconfig.config_value_t_ival_set
    __swig_getmethods__["ival"] = _libconfig.config_value_t_ival_get
    if _newclass:ival = _swig_property(_libconfig.config_value_t_ival_get, _libconfig.config_value_t_ival_set)
    __swig_setmethods__["llval"] = _libconfig.config_value_t_llval_set
    __swig_getmethods__["llval"] = _libconfig.config_value_t_llval_get
    if _newclass:llval = _swig_property(_libconfig.config_value_t_llval_get, _libconfig.config_value_t_llval_set)
    __swig_setmethods__["fval"] = _libconfig.config_value_t_fval_set
    __swig_getmethods__["fval"] = _libconfig.config_value_t_fval_get
    if _newclass:fval = _swig_property(_libconfig.config_value_t_fval_get, _libconfig.config_value_t_fval_set)
    __swig_setmethods__["sval"] = _libconfig.config_value_t_sval_set
    __swig_getmethods__["sval"] = _libconfig.config_value_t_sval_get
    if _newclass:sval = _swig_property(_libconfig.config_value_t_sval_get, _libconfig.config_value_t_sval_set)
    __swig_setmethods__["list"] = _libconfig.config_value_t_list_set
    __swig_getmethods__["list"] = _libconfig.config_value_t_list_get
    if _newclass:list = _swig_property(_libconfig.config_value_t_list_get, _libconfig.config_value_t_list_set)
    def __init__(self): 
        this = _libconfig.new_config_value_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libconfig.delete_config_value_t
    __del__ = lambda self : None;
config_value_t_swigregister = _libconfig.config_value_t_swigregister
config_value_t_swigregister(config_value_t)

class config_setting_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, config_setting_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, config_setting_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _libconfig.config_setting_t_name_set
    __swig_getmethods__["name"] = _libconfig.config_setting_t_name_get
    if _newclass:name = _swig_property(_libconfig.config_setting_t_name_get, _libconfig.config_setting_t_name_set)
    __swig_setmethods__["type"] = _libconfig.config_setting_t_type_set
    __swig_getmethods__["type"] = _libconfig.config_setting_t_type_get
    if _newclass:type = _swig_property(_libconfig.config_setting_t_type_get, _libconfig.config_setting_t_type_set)
    __swig_setmethods__["format"] = _libconfig.config_setting_t_format_set
    __swig_getmethods__["format"] = _libconfig.config_setting_t_format_get
    if _newclass:format = _swig_property(_libconfig.config_setting_t_format_get, _libconfig.config_setting_t_format_set)
    __swig_setmethods__["value"] = _libconfig.config_setting_t_value_set
    __swig_getmethods__["value"] = _libconfig.config_setting_t_value_get
    if _newclass:value = _swig_property(_libconfig.config_setting_t_value_get, _libconfig.config_setting_t_value_set)
    __swig_setmethods__["parent"] = _libconfig.config_setting_t_parent_set
    __swig_getmethods__["parent"] = _libconfig.config_setting_t_parent_get
    if _newclass:parent = _swig_property(_libconfig.config_setting_t_parent_get, _libconfig.config_setting_t_parent_set)
    __swig_setmethods__["config"] = _libconfig.config_setting_t_config_set
    __swig_getmethods__["config"] = _libconfig.config_setting_t_config_get
    if _newclass:config = _swig_property(_libconfig.config_setting_t_config_get, _libconfig.config_setting_t_config_set)
    __swig_setmethods__["hook"] = _libconfig.config_setting_t_hook_set
    __swig_getmethods__["hook"] = _libconfig.config_setting_t_hook_get
    if _newclass:hook = _swig_property(_libconfig.config_setting_t_hook_get, _libconfig.config_setting_t_hook_set)
    __swig_setmethods__["line"] = _libconfig.config_setting_t_line_set
    __swig_getmethods__["line"] = _libconfig.config_setting_t_line_get
    if _newclass:line = _swig_property(_libconfig.config_setting_t_line_get, _libconfig.config_setting_t_line_set)
    __swig_setmethods__["file"] = _libconfig.config_setting_t_file_set
    __swig_getmethods__["file"] = _libconfig.config_setting_t_file_get
    if _newclass:file = _swig_property(_libconfig.config_setting_t_file_get, _libconfig.config_setting_t_file_set)
    def __init__(self): 
        this = _libconfig.new_config_setting_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libconfig.delete_config_setting_t
    __del__ = lambda self : None;
config_setting_t_swigregister = _libconfig.config_setting_t_swigregister
config_setting_t_swigregister(config_setting_t)

CONFIG_ERR_NONE = _libconfig.CONFIG_ERR_NONE
CONFIG_ERR_FILE_IO = _libconfig.CONFIG_ERR_FILE_IO
CONFIG_ERR_PARSE = _libconfig.CONFIG_ERR_PARSE
class config_list_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, config_list_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, config_list_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["length"] = _libconfig.config_list_t_length_set
    __swig_getmethods__["length"] = _libconfig.config_list_t_length_get
    if _newclass:length = _swig_property(_libconfig.config_list_t_length_get, _libconfig.config_list_t_length_set)
    __swig_setmethods__["elements"] = _libconfig.config_list_t_elements_set
    __swig_getmethods__["elements"] = _libconfig.config_list_t_elements_get
    if _newclass:elements = _swig_property(_libconfig.config_list_t_elements_get, _libconfig.config_list_t_elements_set)
    def __init__(self): 
        this = _libconfig.new_config_list_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libconfig.delete_config_list_t
    __del__ = lambda self : None;
config_list_t_swigregister = _libconfig.config_list_t_swigregister
config_list_t_swigregister(config_list_t)

class config_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, config_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, config_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["root"] = _libconfig.config_t_root_set
    __swig_getmethods__["root"] = _libconfig.config_t_root_get
    if _newclass:root = _swig_property(_libconfig.config_t_root_get, _libconfig.config_t_root_set)
    __swig_setmethods__["destructor"] = _libconfig.config_t_destructor_set
    __swig_getmethods__["destructor"] = _libconfig.config_t_destructor_get
    if _newclass:destructor = _swig_property(_libconfig.config_t_destructor_get, _libconfig.config_t_destructor_set)
    __swig_setmethods__["flags"] = _libconfig.config_t_flags_set
    __swig_getmethods__["flags"] = _libconfig.config_t_flags_get
    if _newclass:flags = _swig_property(_libconfig.config_t_flags_get, _libconfig.config_t_flags_set)
    __swig_setmethods__["tab_width"] = _libconfig.config_t_tab_width_set
    __swig_getmethods__["tab_width"] = _libconfig.config_t_tab_width_get
    if _newclass:tab_width = _swig_property(_libconfig.config_t_tab_width_get, _libconfig.config_t_tab_width_set)
    __swig_setmethods__["default_format"] = _libconfig.config_t_default_format_set
    __swig_getmethods__["default_format"] = _libconfig.config_t_default_format_get
    if _newclass:default_format = _swig_property(_libconfig.config_t_default_format_get, _libconfig.config_t_default_format_set)
    __swig_setmethods__["include_dir"] = _libconfig.config_t_include_dir_set
    __swig_getmethods__["include_dir"] = _libconfig.config_t_include_dir_get
    if _newclass:include_dir = _swig_property(_libconfig.config_t_include_dir_get, _libconfig.config_t_include_dir_set)
    __swig_setmethods__["error_text"] = _libconfig.config_t_error_text_set
    __swig_getmethods__["error_text"] = _libconfig.config_t_error_text_get
    if _newclass:error_text = _swig_property(_libconfig.config_t_error_text_get, _libconfig.config_t_error_text_set)
    __swig_setmethods__["error_file"] = _libconfig.config_t_error_file_set
    __swig_getmethods__["error_file"] = _libconfig.config_t_error_file_get
    if _newclass:error_file = _swig_property(_libconfig.config_t_error_file_get, _libconfig.config_t_error_file_set)
    __swig_setmethods__["error_line"] = _libconfig.config_t_error_line_set
    __swig_getmethods__["error_line"] = _libconfig.config_t_error_line_get
    if _newclass:error_line = _swig_property(_libconfig.config_t_error_line_get, _libconfig.config_t_error_line_set)
    __swig_setmethods__["error_type"] = _libconfig.config_t_error_type_set
    __swig_getmethods__["error_type"] = _libconfig.config_t_error_type_get
    if _newclass:error_type = _swig_property(_libconfig.config_t_error_type_get, _libconfig.config_t_error_type_set)
    __swig_setmethods__["filenames"] = _libconfig.config_t_filenames_set
    __swig_getmethods__["filenames"] = _libconfig.config_t_filenames_get
    if _newclass:filenames = _swig_property(_libconfig.config_t_filenames_get, _libconfig.config_t_filenames_set)
    __swig_setmethods__["num_filenames"] = _libconfig.config_t_num_filenames_set
    __swig_getmethods__["num_filenames"] = _libconfig.config_t_num_filenames_get
    if _newclass:num_filenames = _swig_property(_libconfig.config_t_num_filenames_get, _libconfig.config_t_num_filenames_set)
    def __init__(self): 
        this = _libconfig.new_config_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libconfig.delete_config_t
    __del__ = lambda self : None;
config_t_swigregister = _libconfig.config_t_swigregister
config_t_swigregister(config_t)


def config_read(*args):
  return _libconfig.config_read(*args)
config_read = _libconfig.config_read

def config_write(*args):
  return _libconfig.config_write(*args)
config_write = _libconfig.config_write

def config_set_default_format(*args):
  return _libconfig.config_set_default_format(*args)
config_set_default_format = _libconfig.config_set_default_format

def config_set_auto_convert(*args):
  return _libconfig.config_set_auto_convert(*args)
config_set_auto_convert = _libconfig.config_set_auto_convert

def config_get_auto_convert(*args):
  return _libconfig.config_get_auto_convert(*args)
config_get_auto_convert = _libconfig.config_get_auto_convert

def config_read_string(*args):
  return _libconfig.config_read_string(*args)
config_read_string = _libconfig.config_read_string

def config_read_file(*args):
  return _libconfig.config_read_file(*args)
config_read_file = _libconfig.config_read_file

def config_write_file(*args):
  return _libconfig.config_write_file(*args)
config_write_file = _libconfig.config_write_file

def config_set_destructor(*args):
  return _libconfig.config_set_destructor(*args)
config_set_destructor = _libconfig.config_set_destructor

def config_set_include_dir(*args):
  return _libconfig.config_set_include_dir(*args)
config_set_include_dir = _libconfig.config_set_include_dir

def config_init(*args):
  return _libconfig.config_init(*args)
config_init = _libconfig.config_init

def config_destroy(*args):
  return _libconfig.config_destroy(*args)
config_destroy = _libconfig.config_destroy

def config_setting_get_int(*args):
  return _libconfig.config_setting_get_int(*args)
config_setting_get_int = _libconfig.config_setting_get_int

def config_setting_get_int64(*args):
  return _libconfig.config_setting_get_int64(*args)
config_setting_get_int64 = _libconfig.config_setting_get_int64

def config_setting_get_float(*args):
  return _libconfig.config_setting_get_float(*args)
config_setting_get_float = _libconfig.config_setting_get_float

def config_setting_get_bool(*args):
  return _libconfig.config_setting_get_bool(*args)
config_setting_get_bool = _libconfig.config_setting_get_bool

def config_setting_get_string(*args):
  return _libconfig.config_setting_get_string(*args)
config_setting_get_string = _libconfig.config_setting_get_string

def config_setting_lookup_int(*args):
  return _libconfig.config_setting_lookup_int(*args)
config_setting_lookup_int = _libconfig.config_setting_lookup_int

def config_setting_lookup_int64(*args):
  return _libconfig.config_setting_lookup_int64(*args)
config_setting_lookup_int64 = _libconfig.config_setting_lookup_int64

def config_setting_lookup_float(*args):
  return _libconfig.config_setting_lookup_float(*args)
config_setting_lookup_float = _libconfig.config_setting_lookup_float

def config_setting_lookup_bool(*args):
  return _libconfig.config_setting_lookup_bool(*args)
config_setting_lookup_bool = _libconfig.config_setting_lookup_bool

def config_setting_lookup_string(*args):
  return _libconfig.config_setting_lookup_string(*args)
config_setting_lookup_string = _libconfig.config_setting_lookup_string

def config_setting_set_int(*args):
  return _libconfig.config_setting_set_int(*args)
config_setting_set_int = _libconfig.config_setting_set_int

def config_setting_set_int64(*args):
  return _libconfig.config_setting_set_int64(*args)
config_setting_set_int64 = _libconfig.config_setting_set_int64

def config_setting_set_float(*args):
  return _libconfig.config_setting_set_float(*args)
config_setting_set_float = _libconfig.config_setting_set_float

def config_setting_set_bool(*args):
  return _libconfig.config_setting_set_bool(*args)
config_setting_set_bool = _libconfig.config_setting_set_bool

def config_setting_set_string(*args):
  return _libconfig.config_setting_set_string(*args)
config_setting_set_string = _libconfig.config_setting_set_string

def config_setting_set_format(*args):
  return _libconfig.config_setting_set_format(*args)
config_setting_set_format = _libconfig.config_setting_set_format

def config_setting_get_format(*args):
  return _libconfig.config_setting_get_format(*args)
config_setting_get_format = _libconfig.config_setting_get_format

def config_setting_get_int_elem(*args):
  return _libconfig.config_setting_get_int_elem(*args)
config_setting_get_int_elem = _libconfig.config_setting_get_int_elem

def config_setting_get_int64_elem(*args):
  return _libconfig.config_setting_get_int64_elem(*args)
config_setting_get_int64_elem = _libconfig.config_setting_get_int64_elem

def config_setting_get_float_elem(*args):
  return _libconfig.config_setting_get_float_elem(*args)
config_setting_get_float_elem = _libconfig.config_setting_get_float_elem

def config_setting_get_bool_elem(*args):
  return _libconfig.config_setting_get_bool_elem(*args)
config_setting_get_bool_elem = _libconfig.config_setting_get_bool_elem

def config_setting_get_string_elem(*args):
  return _libconfig.config_setting_get_string_elem(*args)
config_setting_get_string_elem = _libconfig.config_setting_get_string_elem

def config_setting_set_int_elem(*args):
  return _libconfig.config_setting_set_int_elem(*args)
config_setting_set_int_elem = _libconfig.config_setting_set_int_elem

def config_setting_set_int64_elem(*args):
  return _libconfig.config_setting_set_int64_elem(*args)
config_setting_set_int64_elem = _libconfig.config_setting_set_int64_elem

def config_setting_set_float_elem(*args):
  return _libconfig.config_setting_set_float_elem(*args)
config_setting_set_float_elem = _libconfig.config_setting_set_float_elem

def config_setting_set_bool_elem(*args):
  return _libconfig.config_setting_set_bool_elem(*args)
config_setting_set_bool_elem = _libconfig.config_setting_set_bool_elem

def config_setting_set_string_elem(*args):
  return _libconfig.config_setting_set_string_elem(*args)
config_setting_set_string_elem = _libconfig.config_setting_set_string_elem

def config_setting_index(*args):
  return _libconfig.config_setting_index(*args)
config_setting_index = _libconfig.config_setting_index

def config_setting_length(*args):
  return _libconfig.config_setting_length(*args)
config_setting_length = _libconfig.config_setting_length

def config_setting_get_elem(*args):
  return _libconfig.config_setting_get_elem(*args)
config_setting_get_elem = _libconfig.config_setting_get_elem

def config_setting_get_member(*args):
  return _libconfig.config_setting_get_member(*args)
config_setting_get_member = _libconfig.config_setting_get_member

def config_setting_add(*args):
  return _libconfig.config_setting_add(*args)
config_setting_add = _libconfig.config_setting_add

def config_setting_remove(*args):
  return _libconfig.config_setting_remove(*args)
config_setting_remove = _libconfig.config_setting_remove

def config_setting_remove_elem(*args):
  return _libconfig.config_setting_remove_elem(*args)
config_setting_remove_elem = _libconfig.config_setting_remove_elem

def config_setting_set_hook(*args):
  return _libconfig.config_setting_set_hook(*args)
config_setting_set_hook = _libconfig.config_setting_set_hook

def config_lookup(*args):
  return _libconfig.config_lookup(*args)
config_lookup = _libconfig.config_lookup

def config_lookup_from(*args):
  return _libconfig.config_lookup_from(*args)
config_lookup_from = _libconfig.config_lookup_from

def config_lookup_int(*args):
  return _libconfig.config_lookup_int(*args)
config_lookup_int = _libconfig.config_lookup_int

def config_lookup_int64(*args):
  return _libconfig.config_lookup_int64(*args)
config_lookup_int64 = _libconfig.config_lookup_int64

def config_lookup_float(*args):
  return _libconfig.config_lookup_float(*args)
config_lookup_float = _libconfig.config_lookup_float

def config_lookup_bool(*args):
  return _libconfig.config_lookup_bool(*args)
config_lookup_bool = _libconfig.config_lookup_bool

def config_lookup_string(*args):
  return _libconfig.config_lookup_string(*args)
config_lookup_string = _libconfig.config_lookup_string
# This file is compatible with both classic and new-style classes.


